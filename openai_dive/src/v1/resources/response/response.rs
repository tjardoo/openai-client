#[cfg(feature = "stream")]
use super::items::{LogProbs, ReasoningSummaryPart};
use super::{
    items::{
        CodeInterpreterCall, ComputerToolCall, CustomToolCall, FileSearchToolCall,
        FunctionToolCall, ImageGenerationCall, LocalShellCall, McpApprovalRequest, McpListTools,
        McpToolCall, Reasoning, WebSearchToolCall,
    },
    shared::{Annotation, ResponseFormat, ResponseTool, ResponseToolChoice, TruncationStrategy},
};
use crate::v1::resources::shared::{ReasoningEffort, Usage};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
pub struct ResponseObject {
    /// Unix timestamp (in seconds) of when this Response was created.
    pub created_at: u32,
    /// An error object returned when the model fails to generate a Response.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<ResponseError>,
    /// Unique identifier for this Response.
    pub id: String,
    /// Details about why the response is incomplete.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub incomplete_details: Option<IncompleteDetails>,
    /// Inserts a system (or developer) message as the first item in the model's context.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub instruction: Option<String>,
    /// An upper bound for the number of tokens that can be generated for a response, including visible output tokens and reasoning tokens.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub max_output_tokens: Option<u32>,
    /// Set of 16 key-value pairs that can be attached to an object.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub metadata: Option<HashMap<String, String>>,
    /// Model ID used to generate the response.
    pub model: String,
    /// The object type of this resource - always set to response.
    pub object: String,
    /// An array of content items generated by the model.
    pub output: Vec<ResponseOutput>,
    /// Whether to allow the model to run tool calls in parallel.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parallel_tool_calls: Option<bool>,
    /// The unique ID of the previous response to the model.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub previous_response_id: Option<String>,
    /// Configuration options for reasoning models.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reasoning: Option<ResponseReasoning>,
    /// The status of the response generation.
    pub status: ReasoningStatus,
    /// What sampling temperature to use, between 0 and 2.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub temperature: Option<f32>,
    /// Configuration options for a text response from the model.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<ResponseText>,
    /// How the model should select which tool (or tools) to use when generating a response.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tool_choice: Option<ResponseToolChoice>,
    /// An array of tools the model may call while generating a response.
    pub tools: Vec<ResponseTool>,
    /// An alternative to sampling with temperature.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub top_p: Option<f32>,
    /// The truncation strategy to use for the model response.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub truncation: Option<TruncationStrategy>,
    /// Represents token usage details.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub usage: Option<Usage>,
    /// A unique identifier representing your end-user.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
pub struct ResponseError {
    /// The error code for the response.
    pub code: String,
    /// A human-readable description of the error.
    pub message: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
pub struct IncompleteDetails {
    /// The reason why the response is incomplete.
    pub reason: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
#[serde(tag = "type", rename_all = "snake_case")]
pub enum ResponseOutput {
    Message(OutputMessage),
    #[serde(rename = "function_call")]
    FunctionToolCall(FunctionToolCall),
    #[serde(rename = "file_search_call")]
    FileSearchToolCall(FileSearchToolCall),
    #[serde(rename = "web_search_call")]
    WebSearchToolCall(WebSearchToolCall),
    #[serde(rename = "computer_call")]
    ComputerToolCall(ComputerToolCall),
    Reasoning(Reasoning),
    #[serde(rename = "image_generation_call")]
    ImageGenerationCall(ImageGenerationCall),
    #[serde(rename = "code_interpreter_call")]
    CodeInterpreterCall(CodeInterpreterCall),
    #[serde(rename = "local_shell_call")]
    LocalShellCall(LocalShellCall),
    #[serde(rename = "mcp_call")]
    McpToolCall(McpToolCall),
    #[serde(rename = "mcp_list_tools")]
    McpListTools(McpListTools),
    #[serde(rename = "mcp_approval_request")]
    McpApprovalRequest(McpApprovalRequest),
    #[serde(rename = "custom_tool_call")]
    CustomToolCall(CustomToolCall),
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
pub struct OutputMessage {
    pub id: String,
    pub role: Role,
    pub status: MessageStatus,
    pub content: Vec<OutputContent>,
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
pub struct ResponseReasoning {
    /// Constrains effort on reasoning for reasoning models.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub effort: Option<ReasoningEffort>,
    // A summary of the reasoning performed by the model.
    // pub generate_summary: Option<ReasoningSummary>,
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
pub struct ResponseText {
    /// An object specifying the format that the model must output.
    pub format: ResponseFormat,
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
pub enum ReasoningSummary {
    Concise,
    Detailed,
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
#[serde(rename_all = "snake_case")]
pub enum ReasoningStatus {
    Completed,
    Failed,
    InProgress,
    Incomplete,
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
pub enum Role {
    User,
    System,
    Assistant,
    Developer,
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
#[serde(rename_all = "snake_case")]
pub enum MessageStatus {
    InProgress,
    Completed,
    Incomplete,
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
#[serde(tag = "type")]
pub enum OutputContent {
    #[serde(rename = "output_text")]
    Text {
        text: String,
        annotations: Vec<Annotation>,
    },
    #[serde(rename = "refusal")]
    Refusal { refusal: String },
}

#[cfg(feature = "stream")]
/// Streaming events for Response API
#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
#[serde(tag = "type")]
pub enum ResponseStreamEvent {
    // Response lifecycle events
    /// response.created - A new response was created
    #[serde(rename = "response.created")]
    ResponseCreated {
        sequence_number: u32,
        response: ResponseObject,
    },
    /// response.queued - Response is queued and waiting to be processed
    #[serde(rename = "response.queued")]
    ResponseQueued {
        sequence_number: u32,
        response: ResponseObject,
    },
    /// response.in_progress - Response is being generated
    #[serde(rename = "response.in_progress")]
    ResponseInProgress {
        sequence_number: u32,
        response: ResponseObject,
    },
    /// response.completed - Response generation completed
    #[serde(rename = "response.completed")]
    ResponseCompleted {
        sequence_number: u32,
        response: ResponseObject,
    },
    /// response.failed - Response generation failed
    #[serde(rename = "response.failed")]
    ResponseFailed {
        sequence_number: u32,
        response: ResponseObject,
    },
    /// response.incomplete - Response finished as incomplete
    #[serde(rename = "response.incomplete")]
    ResponseIncomplete {
        sequence_number: u32,
        response: ResponseObject,
    },

    // Output item events
    /// response.output_item.added - A new output item was added to the response
    #[serde(rename = "response.output_item.added")]
    ResponseOutputItemAdded {
        sequence_number: u32,
        output_index: usize,
        item: ResponseOutput,
    },
    /// response.output_item.done - An output item was completed
    #[serde(rename = "response.output_item.done")]
    ResponseOutputItemDone {
        sequence_number: u32,
        output_index: usize,
        item: ResponseOutput,
    },

    // Content part events
    /// response.content_part.added - A new content part was added
    #[serde(rename = "response.content_part.added")]
    ResponseContentPartAdded {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
        content_index: usize,
        part: OutputContent,
    },
    /// response.content_part.done - A content part is done
    #[serde(rename = "response.content_part.done")]
    ResponseContentPartDone {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
        content_index: usize,
        part: OutputContent,
    },

    // Output text events
    /// response.output_text.delta - A text delta was added to an output item
    #[serde(rename = "response.output_text.delta")]
    ResponseOutputTextDelta {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
        content_index: usize,
        delta: String,
        #[serde(skip_serializing_if = "Option::is_none")]
        logprobs: Option<Vec<LogProbs>>,
    },
    /// response.output_text.done - Text content is finalized
    #[serde(rename = "response.output_text.done")]
    ResponseOutputTextDone {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
        content_index: usize,
        text: String,
        #[serde(skip_serializing_if = "Option::is_none")]
        logprobs: Option<Vec<LogProbs>>,
    },
    /// response.output_text.annotation.added - An annotation was added to output text
    #[serde(rename = "response.output_text.annotation.added")]
    ResponseOutputTextAnnotationAdded {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
        content_index: usize,
        annotation_index: usize,
        annotation: Annotation,
    },

    // Refusal events
    /// response.refusal.delta - A refusal text delta was added
    #[serde(rename = "response.refusal.delta")]
    ResponseRefusalDelta {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
        content_index: usize,
        delta: String,
    },
    /// response.refusal.done - Refusal text is finalized
    #[serde(rename = "response.refusal.done")]
    ResponseRefusalDone {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
        content_index: usize,
        refusal: String,
    },

    // Function call events
    /// response.function_call_arguments.delta - A function call arguments delta was added
    #[serde(rename = "response.function_call_arguments.delta")]
    ResponseFunctionCallArgumentsDelta {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
        delta: String,
    },
    /// response.function_call_arguments.done - Function call arguments are finalized
    #[serde(rename = "response.function_call_arguments.done")]
    ResponseFunctionCallArgumentsDone {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
        name: String,
        arguments: String,
    },

    // File search events
    /// response.file_search_call.in_progress - A file search call was initiated
    #[serde(rename = "response.file_search_call.in_progress")]
    ResponseFileSearchCallInProgress {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
    },
    /// response.file_search_call.searching - A file search is currently searching
    #[serde(rename = "response.file_search_call.searching")]
    ResponseFileSearchCallSearching {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
    },
    /// response.file_search_call.completed - A file search call completed
    #[serde(rename = "response.file_search_call.completed")]
    ResponseFileSearchCallCompleted {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
    },

    // Web search events
    /// response.web_search_call.in_progress - A web search call was initiated
    #[serde(rename = "response.web_search_call.in_progress")]
    ResponseWebSearchCallInProgress {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
    },
    /// response.web_search_call.searching - A web search is executing
    #[serde(rename = "response.web_search_call.searching")]
    ResponseWebSearchCallSearching {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
    },
    /// response.web_search_call.completed - A web search call completed
    #[serde(rename = "response.web_search_call.completed")]
    ResponseWebSearchCallCompleted {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
    },

    // Reasoning events
    /// response.reasoning_text.delta - A reasoning text delta was added
    #[serde(rename = "response.reasoning_text.delta")]
    ResponseReasoningTextDelta {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
        content_index: usize,
        delta: String,
    },
    /// response.reasoning_text.done - Reasoning text is completed
    #[serde(rename = "response.reasoning_text.done")]
    ResponseReasoningTextDone {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
        content_index: usize,
        text: String,
    },
    /// response.reasoning_summary_part.added - A new reasoning summary part was added
    #[serde(rename = "response.reasoning_summary_part.added")]
    ResponseReasoningSummaryPartAdded {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
        summary_index: usize,
        part: ReasoningSummaryPart,
    },
    /// response.reasoning_summary_part.done - A reasoning summary part is completed
    #[serde(rename = "response.reasoning_summary_part.done")]
    ResponseReasoningSummaryPartDone {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
        summary_index: usize,
        part: ReasoningSummaryPart,
    },
    /// response.reasoning_summary_text.delta - A reasoning summary text delta was added
    #[serde(rename = "response.reasoning_summary_text.delta")]
    ResponseReasoningSummaryTextDelta {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
        summary_index: usize,
        delta: String,
    },
    /// response.reasoning_summary_text.done - Reasoning summary text is completed
    #[serde(rename = "response.reasoning_summary_text.done")]
    ResponseReasoningSummaryTextDone {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
        summary_index: usize,
        text: String,
    },

    // Image generation events
    /// response.image_generation_call.in_progress - Image generation call is in progress
    #[serde(rename = "response.image_generation_call.in_progress")]
    ResponseImageGenerationCallInProgress {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
    },
    /// response.image_generation_call.generating - Image generation is actively generating
    #[serde(rename = "response.image_generation_call.generating")]
    ResponseImageGenerationCallGenerating {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
    },
    /// response.image_generation_call.partial_image - A partial image is available
    #[serde(rename = "response.image_generation_call.partial_image")]
    ResponseImageGenerationCallPartialImage {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
        partial_image_index: usize,
        partial_image_b64: String,
    },
    /// response.image_generation_call.completed - Image generation completed
    #[serde(rename = "response.image_generation_call.completed")]
    ResponseImageGenerationCallCompleted {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
    },

    // MCP (Model Context Protocol) events
    /// response.mcp_call.in_progress - MCP tool call is in progress
    #[serde(rename = "response.mcp_call.in_progress")]
    ResponseMcpCallInProgress {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
    },
    /// response.mcp_call.completed - MCP tool call completed successfully
    #[serde(rename = "response.mcp_call.completed")]
    ResponseMcpCallCompleted {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
    },
    /// response.mcp_call.failed - MCP tool call failed
    #[serde(rename = "response.mcp_call.failed")]
    ResponseMcpCallFailed {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
    },
    /// response.mcp_call_arguments.delta - MCP tool call arguments delta
    #[serde(rename = "response.mcp_call_arguments.delta")]
    ResponseMcpCallArgumentsDelta {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
        delta: String,
    },
    /// response.mcp_call_arguments.done - MCP tool call arguments finalized
    #[serde(rename = "response.mcp_call_arguments.done")]
    ResponseMcpCallArgumentsDone {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
        arguments: String,
    },
    /// response.mcp_list_tools.in_progress - MCP list tools is in progress
    #[serde(rename = "response.mcp_list_tools.in_progress")]
    ResponseMcpListToolsInProgress {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
    },
    /// response.mcp_list_tools.completed - MCP list tools completed
    #[serde(rename = "response.mcp_list_tools.completed")]
    ResponseMcpListToolsCompleted {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
    },
    /// response.mcp_list_tools.failed - MCP list tools failed
    #[serde(rename = "response.mcp_list_tools.failed")]
    ResponseMcpListToolsFailed {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
    },

    // Code interpreter events
    /// response.code_interpreter_call.in_progress - Code interpreter call is in progress
    #[serde(rename = "response.code_interpreter_call.in_progress")]
    ResponseCodeInterpreterCallInProgress {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
    },
    /// response.code_interpreter_call.interpreting - Code interpreter is actively interpreting
    #[serde(rename = "response.code_interpreter_call.interpreting")]
    ResponseCodeInterpreterCallInterpreting {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
    },
    /// response.code_interpreter_call.completed - Code interpreter call completed
    #[serde(rename = "response.code_interpreter_call.completed")]
    ResponseCodeInterpreterCallCompleted {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
    },
    /// response.code_interpreter_call_code.delta - Code interpreter code delta
    #[serde(rename = "response.code_interpreter_call_code.delta")]
    ResponseCodeInterpreterCallCodeDelta {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
        delta: String,
    },
    /// response.code_interpreter_call_code.done - Code interpreter code finalized
    #[serde(rename = "response.code_interpreter_call_code.done")]
    ResponseCodeInterpreterCallCodeDone {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
        code: String,
    },

    // Custom tool call events
    /// response.custom_tool_call_input.delta - Custom tool call input delta
    #[serde(rename = "response.custom_tool_call_input.delta")]
    ResponseCustomToolCallInputDelta {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
        delta: String,
    },
    /// response.custom_tool_call_input.done - Custom tool call input finalized
    #[serde(rename = "response.custom_tool_call_input.done")]
    ResponseCustomToolCallInputDone {
        sequence_number: u32,
        item_id: String,
        output_index: usize,
        input: String,
    },

    // Error event
    /// error - An error occurred
    #[serde(rename = "error")]
    Error {
        sequence_number: u32,
        code: String,
        message: String,
        #[serde(skip_serializing_if = "Option::is_none")]
        param: Option<String>,
    },
}

#[cfg(feature = "stream")]
impl ResponseStreamEvent {
    /// Get the SSE event name for this event
    pub fn event_name(&self) -> &'static str {
        match self {
            Self::ResponseCreated { .. } => "response.created",
            Self::ResponseQueued { .. } => "response.queued",
            Self::ResponseInProgress { .. } => "response.in_progress",
            Self::ResponseCompleted { .. } => "response.completed",
            Self::ResponseFailed { .. } => "response.failed",
            Self::ResponseIncomplete { .. } => "response.incomplete",
            Self::ResponseOutputItemAdded { .. } => "response.output_item.added",
            Self::ResponseOutputItemDone { .. } => "response.output_item.done",
            Self::ResponseContentPartAdded { .. } => "response.content_part.added",
            Self::ResponseContentPartDone { .. } => "response.content_part.done",
            Self::ResponseOutputTextDelta { .. } => "response.output_text.delta",
            Self::ResponseOutputTextDone { .. } => "response.output_text.done",
            Self::ResponseOutputTextAnnotationAdded { .. } => {
                "response.output_text.annotation.added"
            }
            Self::ResponseRefusalDelta { .. } => "response.refusal.delta",
            Self::ResponseRefusalDone { .. } => "response.refusal.done",
            Self::ResponseFunctionCallArgumentsDelta { .. } => {
                "response.function_call_arguments.delta"
            }
            Self::ResponseFunctionCallArgumentsDone { .. } => {
                "response.function_call_arguments.done"
            }
            Self::ResponseFileSearchCallInProgress { .. } => {
                "response.file_search_call.in_progress"
            }
            Self::ResponseFileSearchCallSearching { .. } => "response.file_search_call.searching",
            Self::ResponseFileSearchCallCompleted { .. } => "response.file_search_call.completed",
            Self::ResponseWebSearchCallInProgress { .. } => "response.web_search_call.in_progress",
            Self::ResponseWebSearchCallSearching { .. } => "response.web_search_call.searching",
            Self::ResponseWebSearchCallCompleted { .. } => "response.web_search_call.completed",
            Self::ResponseReasoningTextDelta { .. } => "response.reasoning_text.delta",
            Self::ResponseReasoningTextDone { .. } => "response.reasoning_text.done",
            Self::ResponseReasoningSummaryPartAdded { .. } => {
                "response.reasoning_summary_part.added"
            }
            Self::ResponseReasoningSummaryPartDone { .. } => "response.reasoning_summary_part.done",
            Self::ResponseReasoningSummaryTextDelta { .. } => {
                "response.reasoning_summary_text.delta"
            }
            Self::ResponseReasoningSummaryTextDone { .. } => "response.reasoning_summary_text.done",
            Self::ResponseImageGenerationCallInProgress { .. } => {
                "response.image_generation_call.in_progress"
            }
            Self::ResponseImageGenerationCallGenerating { .. } => {
                "response.image_generation_call.generating"
            }
            Self::ResponseImageGenerationCallPartialImage { .. } => {
                "response.image_generation_call.partial_image"
            }
            Self::ResponseImageGenerationCallCompleted { .. } => {
                "response.image_generation_call.completed"
            }
            Self::ResponseMcpCallInProgress { .. } => "response.mcp_call.in_progress",
            Self::ResponseMcpCallCompleted { .. } => "response.mcp_call.completed",
            Self::ResponseMcpCallFailed { .. } => "response.mcp_call.failed",
            Self::ResponseMcpCallArgumentsDelta { .. } => "response.mcp_call_arguments.delta",
            Self::ResponseMcpCallArgumentsDone { .. } => "response.mcp_call_arguments.done",
            Self::ResponseMcpListToolsInProgress { .. } => "response.mcp_list_tools.in_progress",
            Self::ResponseMcpListToolsCompleted { .. } => "response.mcp_list_tools.completed",
            Self::ResponseMcpListToolsFailed { .. } => "response.mcp_list_tools.failed",
            Self::ResponseCodeInterpreterCallInProgress { .. } => {
                "response.code_interpreter_call.in_progress"
            }
            Self::ResponseCodeInterpreterCallInterpreting { .. } => {
                "response.code_interpreter_call.interpreting"
            }
            Self::ResponseCodeInterpreterCallCompleted { .. } => {
                "response.code_interpreter_call.completed"
            }
            Self::ResponseCodeInterpreterCallCodeDelta { .. } => {
                "response.code_interpreter_call_code.delta"
            }
            Self::ResponseCodeInterpreterCallCodeDone { .. } => {
                "response.code_interpreter_call_code.done"
            }
            Self::ResponseCustomToolCallInputDelta { .. } => {
                "response.custom_tool_call_input.delta"
            }
            Self::ResponseCustomToolCallInputDone { .. } => "response.custom_tool_call_input.done",
            Self::Error { .. } => "error",
        }
    }
}
